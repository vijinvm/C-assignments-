											ASSIGNMENTS-1

1. using System;
namespace calculator
{
    class Program
    {
        static void Main(string[] args)
        {
            string value;
            do
            {
                int res;
                Console.WriteLine("enter num1:");
                int num1 = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("enter symbol for operation :");
                string symbol = Console.ReadLine();
                Console.WriteLine("enter num2:");
                int num2 = Convert.ToInt32(Console.ReadLine());
                switch (symbol)
                {
                    case "+":
                        res = num1 + num2;
                        Console.WriteLine("Addition:" + res);
                        break;
                    case "-":
                        res = num1 - num2;
                        Console.WriteLine("Subtraction:" + res);
                        break;
                    case "*":
                        res = num1 * num2;
                        Console.WriteLine("Multiplication:" + res);
                        break;
                    case "/":
                        res = num1 / num2;
                        Console.WriteLine("Division:" + res);
                        break;
                    default:
                        Console.WriteLine("Wrong input");
                        break;
                }
                Console.ReadLine();
                Console.Write("Do you want to continue(y/n):");
                value = Console.ReadLine();
            }
            while (value == "y" || value == "Y");
        }
    }
}

OUTPUT:
enter num1:
5
enter symbol for operation :
+
enter num2:
6
Addition:11

Do you want to continue(y/n):Y
enter num1:
5
enter symbol for operation :
*
enter num2:
4
Multiplication:20

Do you want to continue(y/n):N
2. 

using System;
using System.Collections.Generic;
using System.Text;
    namespace ConsoleApp5
{
    class Class2
    {
        static void Main(string[] args) 
        {
            double[] marks = new double[5];
            double highestMarks = 0;
            Console.WriteLine("Enter the marks of five students:");
            for (int i = 0; i < 5; i++) 
            {
                Console.Write("Student {0}: ", i + 1);
                marks[i] = Convert.ToDouble(Console.ReadLine()); 
                if (marks[i] > highestMarks)
                {
                    highestMarks = marks[i]; 
                }
            }
            Console.WriteLine("The highest marks obtained is: {0}", highestMarks);
        }
    }
}

OUTPUT:

Enter the marks of five students:
Student 1: 67
Student 2: 56
Student 3: 78
Student 4: 87
Student 5: 98
The highest marks obtained is: 98

3.

using System; 
class Program
{
    static void Main(string[] args)
    {       
       
          int[] numbers = { 1, 2, 3, 4, 5 };    
        int sum = SumIntegers(numbers);        
         
            Console.WriteLine("Sum of integers: " + sum);      
         
        
          Console.ReadKey(); 
    }    
    static int SumIntegers(params int[] numbers) 
    {     
           
           int sum = 0;     
        foreach (int number in numbers)   
        {     
            sum += number;   
        }       
        return sum; 
    }
} 


OUTPUT:
Sum of integers: 15

4.
 using System;
using System.Collections.Generic;
using System.Text;
namespace CSHARP_ASSIGMENTS
{
 class Swap
    {
     public static void Main()
        {
            int fn= 0;
            int sn = 0;
            int temp = 0;
            Swap.swapNum(ref fn, ref sn, ref temp);
            Console.WriteLine("after swapping");
            Console.WriteLine("first number={0}", fn);
            Console.WriteLine("Second number={0}", sn);
        }
        public static void swapNum(ref int a,ref int b,ref int c)
        {
            Console.WriteLine("input the first number");
            a = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("input the second number");
            b = Convert.ToInt32(Console.ReadLine());
            c = a;
            a = b;
            b = c;

        }
     }

 }

OUTPUT:
input the first number
8
input the second number
9
after swapping
first number=9
Second number=8

5.
 using System;
using System.Collections.Generic;
using System.Text;

namespace CSHARP_ASSIGMENTS
{
    class Circle
    {
        public static void Main()
        {
            decimal pi = 3.14m;
            int r = 0;
            decimal area = 0m;
            decimal circumference = 0m;
            Console.WriteLine("area of circle");
            Console.WriteLine("----------------");
            Console.WriteLine("enter radius of circle");
            r = Convert.ToInt32(Console.ReadLine());
            area = pi * r * r;
            Circle.area(ref area);
            Console.WriteLine("circumference of circle");
            Console.WriteLine("-----------");
            Console.WriteLine("enter radius of circle");
            r = Convert.ToInt32(Console.ReadLine());
            circumference = 2 * pi * r;
            Circle.circumference(ref circumference);
        }
        public static void area(ref decimal a)
        {
            Console.WriteLine("area of circle={0}", a);
        }
        public static void circumference(ref decimal c)
        {
            Console.WriteLine("circumference of circle={o}", c);
        }
    }
}

OUTPUT:
area of circle
----------------
enter radius of circle
6
area of circle=113.04
circumference of circle
-----------
enter radius of circle
6
Circumference of circle =37.68

6. 
using System;
namespace assignments_of_csharp
{
    public struct Books
    {
        private int BOOKID;
        private string TITLE;
        private int PRICE;
        private string BOOKTYPE;
        public int bookid
        {
            get
            {
                return this.BOOKID;
            }
            set
            {
                this.BOOKID = value;
            }
        }
        public string Title
        {
            get
            {
                return this.TITLE;
            }
            set
            {
                this.TITLE = value;
            }
        }
        public int Price
        {
            get
            {
                return this.PRICE;
            }
            set
            {
                this.PRICE = value;
            }
        }
        public string booktype
        {
            get
            {
                return this.BOOKTYPE;
            }
            set
            {
                this.BOOKTYPE = value;
            }
        }
        public Books(int bookid, string title, int price, string booktype)
        {
            this.BOOKID = bookid; this.TITLE = title; this.PRICE = price; this.BOOKTYPE = booktype;
        }
        public void PrintDetails()
        {
            Console.WriteLine("BookId ={0} , Title ={1} ,Price={2} ,BookType={3}", this.BOOKID, this.TITLE, this.PRICE, this.BOOKTYPE);
        }
    }
    public enum bookType
    {
        magazine, novel, referenceBook, miscellaneous
    }
    public class bookstructure
    {
        public static void Main()
        {
            Books b1 = new Books(101, "Bio", 20, "magazine");
            b1.PrintDetails();
            Books b2 = new Books(102, "Phy", 30, "novel");
            b2.PrintDetails();
            Books b3 = new Books(103, "civics", 20, "miscellaneous");
            b3.PrintDetails();
        }
    }
}

OUTPUT:

BookId =101 , Title =Bio ,Price=20 ,BookType=magazine
BookId =102 , Title =Phy ,Price=30 ,BookType=novel
BookId =103 , Title =civics ,Price=20 ,BookType=miscellaneous

						***********************************************************************

											ASSIGNMENT -2
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

public class Employee
{
    int EmpNo;
    string EmpName;
    double Salary;
    double HRA;
    double TA;
    double DA;
    double PF;
    double TDS;
    double NetSalary;
    double GrossSalary;
    //method 
    public void set_EmpNo_Name_Salary()
    {
        //taking input of emp no,emp name and for  salary 
        Console.WriteLine("Enter Emp No, Emp Name,Salary of an an employee");
        EmpNo = Convert.ToInt32(Console.ReadLine());
        EmpName = Console.ReadLine();
        Salary = Convert.ToDouble(Console.ReadLine());
 Console.WriteLine("Emp No =  {0}\nEmpName = {1}\nSalary = {2} ",EmpNo, EmpName, Salary);
    }
    public double GroSal()
    {
        GrossSalary = 0;
        if (Salary < 5000)
        {
            HRA = 10 * Salary / 100;
            TA = 5 * Salary / 100;
            DA = 15 * Salary / 100;
            GrossSalary = Salary + HRA + TA + DA;
        }
        else if (Salary < 10000)
        {
            HRA = 15 * Salary / 100;
            TA = 10 * Salary / 100;
            DA = 20 * Salary / 100;
            GrossSalary = Salary + HRA + TA + DA;
        }
        else if (Salary < 150000)
        {
            HRA = 20 * Salary / 100;
            TA = 15 * Salary / 100;
            DA = 25 * Salary / 100;
            GrossSalary = Salary + HRA + TA + DA;
        }
        else if (Salary < 200000)
        {
            HRA = 25 * Salary / 100;
            TA = 20 * Salary / 100;
            DA = 30 * Salary / 100;
            GrossSalary = Salary + HRA + TA + DA;
        }
        else if (Salary >= 20000)
        {
            HRA = 10 * Salary / 100;
            TA = 5 * Salary / 100;
            DA = 15 * Salary / 100;
            GrossSalary = Salary + HRA + TA + DA;

        }
        return GrossSalary;
    }
    public void CalCulateSalary()
    {
        Console.WriteLine("HERE PF , TDS AND NET SALARY OF AN EMPLOYEE");
        Double GrosSal = GroSal();
        PF = 10 * GrosSal / 100;
        TDS = 18 * GrosSal / 100;
        NetSalary = GrosSal - (PF + TDS);
        Console.WriteLine(" PF = {0} \nTDS = {1}\nNetSalary = {2}", PF, TDS, NetSalary);
    }
static void Main()
    {
        Employee emp = new Employee();
        emp.set_EmpNo_Name_Salary();
        Double Gs = emp.GroSal();
        Console.WriteLine(" Gross SALARY {0}  ", Gs);
        emp.CalCulateSalary();
        Console.ReadLine();
    }
}

OUTPUT:
Enter Emp No, Emp Name,Salary of an an employee
657757
vijin
30000
Emp No =  657757
EmpName = usha
Salary = 30000
 Gross SALARY 48000  
HERE PF , TDS AND NET SALARY OF AN EMPLOYEE
 PF = 4800
TDS = 8640
NetSalary = 34560

						**********************************************************************
										   ASSIGNMENT-3
1.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Console;

namespace ASSIGNMENTS_CSHARP2
{
    class Inhertiance
    {
        public interface IPrintable
        {
            void DisplayEmployeeDetails();
        }
        public class Employee
        {
            public int emp_id;
            public string emp_name;
            public float Salary;
            public float GrossSalary;
            public void GetSalaryWithEmployeeDetails()
            {
                WriteLine("Enter Employee Details Like emp_id,emp_name");
                emp_id = int.Parse(ReadLine());
                emp_name = ReadLine();
                WriteLine("Enter Salary of an Employe .");
                Salary = float.Parse(ReadLine());
            }
            public virtual void CalculateSalary()
            {
            }
        }
        public class Manager : Employee, IPrintable
        {
            private float PA;
            private float FA;
            private float OA;
            public override void CalculateSalary()
            {
                PA = 8 * Salary / 100;
                FA = 13 * Salary / 100;
                OA = 3 * Salary / 100;
                GrossSalary = Salary + PA + FA + OA;
            }
            public void DisplayEmployeeDetails()
            {
                WriteLine("Manager Details...");
                WriteLine("emp_id: {0}\nemp_name: {1}\nGrossSalary:{2}", emp_id, emp_name, GrossSalary);
            }
        }
        public class MarketingExecutive : Employee, IPrintable
        //inherited Employee class and interface IEmployee 
        {
            private int Distance;
            private float TourAllowances;
            private float Telephone_Allowances;
            public override void CalculateSalary() //override method of Employee class 
            {
                WriteLine("Enter Distance travelled during Marketing Executive in km");
                Distance = int.Parse(ReadLine());//taking distance input 
                TourAllowances = 5 * Distance; //5 rupees per km 
                Telephone_Allowances = 1000;
                GrossSalary = Salary + TourAllowances + Telephone_Allowances;
            }
            public void DisplayEmployeeDetails() //implementation of interface method 
            {
                WriteLine("Marketing Executive Details....");
                WriteLine("emp_id: {0}\n emp_name: {1}\nGross Salary:{2}", emp_id, emp_name, GrossSalary);
            }
        }
        internal class Program
        {
            static void Main(string[] args)
            {
                Manager mg = new Manager();
                MarketingExecutive me = new MarketingExecutive();
                WriteLine("Manager Input");
                mg.GetSalaryWithEmployeeDetails();
                mg.CalculateSalary();
                mg.DisplayEmployeeDetails();
                WriteLine("Marketing Executive Input");
                me.GetSalaryWithEmployeeDetails();
                me.CalculateSalary();
                me.DisplayEmployeeDetails();
                ReadLine();
            }
        }
    }
}

  						   
2.
using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleApp5
{
    class MyStack: ICloneable
    {
        

            private int[] data;
            private int top;
            private int max;
            public MyStack(int size)
            {
                data = new int[size];
                top = -1;
                max = size;
            }

            public void push(int item)
            {
                if (top == max - 1)
                {
                    Console.WriteLine("Stack Overflow");
                    return;
                }
                else
                {
                    data[++top] = item;
                }
            }

            public int pop()
            {
                if (top == -1)
                {
                    Console.WriteLine("Stack Underflow");
                    return -1;
                }
                else
                {
                    Console.WriteLine("Poped element is: " + data[top]);
                    return data[top--];
                }
            }

            public void printStack()
            {
                if (top == -1)
                {
                    Console.WriteLine("Stack is Empty");
                    return;
                }
                else
                {
                    for (int i = 0; i <= top; i++)
                    {
                        Console.WriteLine("Item[" + (i + 1) + "]: " + data[i]);
                    }
                }
            }
            public object Clone()
            {
                return this;
            }
        
    }
    public class operations
    {
        static void Main()
        {
            MyStack S = new MyStack(5);
            MyStack C = (MyStack)S.Clone();

            C.push(10);
            C.push(20);
            C.push(30);
            C.push(40);
            C.push(50);

            Console.WriteLine("Items are : ");
            C.printStack();
            C.pop();
            C.pop();
            C.pop();

            Console.WriteLine("Items are : ");
            C.printStack();
        }
        }
}

OUTPUT:

Items are :
Item[1]: 10
Item[2]: 20
Item[3]: 30
Item[4]: 40
Item[5]: 50
Poped element is: 50
Poped element is: 40
Poped element is: 30
Items are :
Item[1]: 10
Item[2]: 20


3.
using System; 
using System.Collections; 
using System.Collections.Generic; 
using System.Data; 
using System.Diagnostics; 
using System.Linq; 
using System.Text; 
using System.Threading.Tasks; 
namespace StackExceptionPro 
{ 
    interface Istack 
    { 
        Boolean IsEmpty(); 
        void Push(object element); 
        object Pop(); 
        object Peek(); 
        void Display(); 
    } 
    class PushPop : Istack 
    { 
        public int top; 
        object[] item; 
        public int stack_size; 
        public PushPop(int stack_size) //parametrised constructor 
        { 
            this.stack_size = stack_size; 
            item = new object[stack_size]; 
            top = -1; 
        } 
        public PushPop() //default constructor 
        { 
            stack_size = 10; 
            item = new object[stack_size]; 
            top = -1; 
        } 
        public bool IsEmpty() //Method to check is stack empty or full 
        { 
            if (top == (stack_size - 1)) 
            { 
                return true; 
            } 
            else 
                return false; 
        } 
        public void Push(object element) 
        { 
            if (top == (stack_size - 1)) 
            { 
                throw new Exception("Exception Stack overflow because stack is full"); 
            } 
            else 
            { 
                item[++top] = element; 
                Console.WriteLine("Item Pushed Successfully"); 
            } 
        } 
        public object Pop() 
        { 
            if (IsEmpty()) 
            { 
                throw new Exception("Exception underflow because stack is empty"); 
                return null; 
            } 
            else 
            { 
                return item[top--]; 
            } 
        } 
        public object Peek() 
        { 
            if (IsEmpty()) 
            { 
                throw new Exception("Stack Underflow exception because stack is empty"); 
                return null; 
            } 
            else 
            { 
                return item[top]; 
            } 
        } 
        public void Display() 
        { 
            for (int i = top; i > -1; i--) 
            { 
                Console.WriteLine(item[i]); 
            } 
        } 
    } 
    internal class Program 
    { 
        static void Main(string[] args) 
        { 
            PushPop st = new PushPop(); 
            object element; 
            while (true) 
            { 
                Console.Clear(); 
                Console.WriteLine("1. IsEmpty()"); 
                Console.WriteLine("2. Push()"); 
                Console.WriteLine("3. Pop()"); 
                Console.WriteLine("4. Peek()"); 
                Console.WriteLine("5. Display()"); 
                Console.WriteLine("6. Exit()"); 
                Console.WriteLine("Enter Your Choice"); 
                int choice; 
                choice = int.Parse(Console.ReadLine()); 
                Console.WriteLine(); 
                switch (choice) 
                { 
                    case 1: 
                        if (st.IsEmpty()) 
                        { 
                            Console.WriteLine("Stack is Empty"); 
                        } 
                        else 
                        { 
                            Console.WriteLine("Stack is not empty"); 
                        } 
                        break; 
                    case 2: 
                        Console.WriteLine("Enter element"); 
                        element = Console.ReadLine(); 
                        try 
                        { 
                            st.Push(element); 
                        } 
                        catch (StackOverflowException e) 
                        { 
                            Console.WriteLine(e.Message); 
                        } 
                        break; 
                    case 3: 
                        try 
                        { 
                            element = st.Pop(); 
                            Console.WriteLine("Element removed is {0} ", element); 
                        } 
                        catch (Exception e) 
                        { 
                            Console.WriteLine(e.Message); 
                        } 
                        break; 
                    case 4: 
                        try 
                        { 
                            element = st.Peek(); 
                            Console.WriteLine("Element removed is {0} ", element); 
                        } 
                        catch (Exception e) 
                        { 
                            Console.WriteLine(e.Message); 
                        } 
                        break; 
                    case 5: 
                        st.Display(); 
                        break; 
                    case 6: 
                        Environment.Exit(0); 
                        break; 
                    default: 
                        Console.WriteLine("Enter valid choice"); 
                        break; 
                } 
                Console.ReadLine(); 
            } 
        } 
 					********************************************************************
										ASSIGNMENT-4
1.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace StackExceptionPro
{
    interface Istack
    {
        Boolean IsEmpty();
        void Push(object element);
        object Pop();
        object Peek();
        void Display();
    }
    class PushPop : Istack
    {
        public int top;
        object[] item;
        public int stack_size;
        public PushPop(int stack_size) //parametrised constructor 
        {
            this.stack_size = stack_size;
            item = new object[stack_size];
            top = -1;
        }
        public PushPop() //default constructor 
        {
            stack_size = 10;
            item = new object[stack_size];
            top = -1;
        }
        public bool IsEmpty() //Method to check is stack empty or full 
        {
            if (top == (stack_size - 1))
            {
                return true;
            }
            else
                return false;
        }
        public void Push(object element)
        {
            if (top == (stack_size - 1))
            {
                throw new Exception("Exception Stack overflow because stack is full");
            }
            else
            {
                item[++top] = element;
                Console.WriteLine("Item Pushed Successfully");
            }
        }
        public object Pop()
        {
            if (IsEmpty())
            {
                throw new Exception("Exception underflow because stack is empty");
                return null;
            }
            else
            {
                return item[top--];
            }
        }
        public object Peek()
        {
            if (IsEmpty())
            {
                throw new Exception("Stack Underflow exception because stack is empty");
                return null;
            }
            else
            {
                return item[top];
            }
        }
        public void Display()
        {
            for (int i = top; i > -1; i--)
            {
                Console.WriteLine(item[i]);
            }
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            PushPop st = new PushPop(5);
            object element;
            while (true)
            {
                
                Console.WriteLine("1. IsEmpty()");
                Console.WriteLine("2. Push()");
                Console.WriteLine("3. Pop()");
                Console.WriteLine("4. Peek()");
                Console.WriteLine("5. Display()");
                Console.WriteLine("6. Exit()");
                Console.WriteLine("Enter Your Choice");
                int choice;
                choice = int.Parse(Console.ReadLine());
                Console.WriteLine();
                switch (choice)
                {
                    case 1:
                        if (st.IsEmpty())
                        {
                            Console.WriteLine("Stack is Empty");
                        }
                        else
                        {
                            Console.WriteLine("Stack is not empty");
                        }
                        break;
                    case 2:
                        Console.WriteLine("Enter element");
                        element = Console.ReadLine();
                        try
                        {
                            st.Push(element);
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e.Message);
                        }
                        break;
                    case 3:
                        try
                        {
                            element = st.Pop();
                            Console.WriteLine("Element removed is {0} ", element);
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e.Message);
                        }
                        break;
                    case 4:
                        try
                        {
                            element = st.Peek();
                            Console.WriteLine("Element removed is {0} ", element);
                        }
                        catch (Exception e)
                        {
                            Console.WriteLine(e.Message);
                        }
                        break;
                    case 5:
                        st.Display();
                        break;
                    case 6:
                        Environment.Exit(0);
                        break;
                    default:
                        Console.WriteLine("Enter valid choice");
                        break;
                }
                Console.ReadLine();
            }
        }
    }
}



OUTPUT:

1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
1
 
Stack is not empty
 
1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
2
 
Enter element
2
Item Pushed Successfully
 
1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
3
 
Element removed is 2
2
1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
2
 
Enter element
4
Item Pushed Successfully
 
1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
2
 
Enter element
6
Item Pushed Successfully
 
1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
5
 
6
4
 
1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
4
 
Element removed is 6
 
1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
5
 
6
4
 
1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
6

1. IsEmpty()
2. Push()
3. Pop()
4. Peek()
5. Display()
6. Exit()
Enter Your Choice
3
 
Index was outside the bounds of the array.




 

								
							*************************************************************
								              ASSIGNEMENT-5
1.
using System;
namespace Assignment5CF_Q1
{
    class Program
    {
        public static void Main(string[] args)
        {
            int[] array1 = { 23, 56, 2, 89, 45, 14, 6 };
            string[] array2 = { "Priya", "Ajay", "Isha", "Kiran","vishwaja" };
            string[] array3 = { "", "", "", "",  "Vikas", "Trisha" };
            Console.WriteLine("Original Elements in Array1 :");
            foreach (int var in array1)
            {
                Console.WriteLine(var + " ");
            }
            Console.WriteLine("\n\nOriginal Elements in Array2 :");
            foreach (string i in array2)
            {
                Console.Write(i + " ");
            }
            Console.WriteLine("\n\nSorted Elements in Array1 :\n");
            Array.Sort(array1);
            foreach (int var in array1)
            {
                Console.Write(var + " ");
            }
            Console.WriteLine("\n\nSorted Elements in Array2 :");
            Array.Sort(array2);
            foreach (string i in array2)
            {
                Console.Write(i + " ");
            }
            Console.WriteLine("\n\nReversed Elements in Array1 :");
            Array.Reverse(array1);
            foreach (int var in array1)
            {
                Console.Write(var + " ");
            }
            Console.WriteLine("\n\nReversed Elements in Array2 :");
            Array.Reverse(array2);
            foreach (string i in array2)
            {
                Console.Write(i + " ");
            }
            Console.WriteLine("\n\nCleared Elements in Array1 :");
            Array.Clear(array1, 2, 5);
            foreach (int var in array1)
            {
                Console.Write(var + " ");
            }
            Console.WriteLine("\n\nCopied Elements in Array3 from array2 :");
            Array.Copy(array2, array3, 4);
            foreach (string var in array3)
            {
                Console.Write(var + " ");
            }
        }

    }
}

OUTPUT:
Original Elements in Array1 :
23
56
2
89
45
14
6


Original Elements in Array2 :
Priya Ajay Isha Kiran vishwaja

Sorted Elements in Array1 :

2 6 14 23 45 56 89

Sorted Elements in Array2 :
Ajay Isha Kiran Priya vishwaja

Reversed Elements in Array1 :
89 56 45 23 14 6 2

Reversed Elements in Array2 :
vishwaja Priya Kiran Isha Ajay

Cleared Elements in Array1 :
89 56 0 0 0 0 0

Copied Elements in Array3 from array2 :
vishwaja Priya Kiran Isha Vikas Trisha

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using System.Linq;


namespace collectionAssignement5
{
    class Program1
    {
        static void Main(string[] args)
        {
            LinkedList<string> employee = new LinkedList<string>();
            employee.AddFirst("vijin");
            employee.AddFirst("usha");
            employee.AddFirst("rahul");
            employee.AddFirst("patrudu");
            employee.AddFirst("kunika");
            employee.AddFirst("pratyusha");
            Console.WriteLine("Display the list of an employee\n");
            foreach (string emp in employee)
            {
                Console.WriteLine(emp + "\n");
            }
            Console.WriteLine("Total number of employee in the list : " + employee.Count());
            Console.WriteLine("\n");
            Console.WriteLine("The employee name prabhakar is present in linked list : " +
      employee.Contains("prabhakar"));
            Console.WriteLine("\n");
            Console.ReadLine();
        }

    }
}

output:
Display the list of an employee

vijin

usha

rahul

patrudu

kunika

pratyusha

Total number of employee in the list : 6


The employee name prabhakar is present in linked list : False



3) using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Collections;


namespace collectionAssignement5
{
    public class Employee
    {
        string name;
        int emp_id;
        double salary;
        public Employee(string name, int emp_id, double salary)
        {
            this.name = name;
            this.emp_id = emp_id;
            this.salary = salary;
        }
        public override string ToString()
        {
            return
            String.Format("name: {0,-10} emp_id: {1,10} salary : {2}", name, emp_id, salary);
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            ArrayList emp1 = new ArrayList();
            Console.WriteLine("Add element to the list");
            emp1.Add(new Employee("vijin", 184, 234350));
            emp1.Add(new Employee("usha", 186, 421500));
            emp1.Add(new Employee("kunika", 189, 234569));
            emp1.Add(new Employee("pratyusha", 239, 223401));
            Console.WriteLine("Employee Details\n");
            foreach (Employee empl in emp1)
            {
                Console.WriteLine(" " + empl);
            }
            Console.ReadLine();
        }
    }



}
output:
Add element to the list
Employee Details

 name: vijin     emp_id:        184 salary : 234350
 name: usha       emp_id:        186 salary : 421500
 name: kunika     emp_id:        189 salary : 234569
 name: pratyusha    emp_id:        239 salary : 223401


4)using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Collections;
using static System.Console;


namespace collectionAssignement5
{
    class Q5MyStack
    {

        static void Main(string[] args)
        {
            Stack st = new Stack();
            st.Push("vijin");
            st.Push("usha");
            st.Push(980);
            st.Push(45);
            st.Push('a');
            st.Push(225.67f);
            st.Push(231348.90D);
            foreach (object obj in st)
            {
                Console.WriteLine(obj);
            }
            WriteLine("\n");
            WriteLine("Popping the element from stack {0}", st.Pop());
            ReadLine();
        }

    }
}
ouput:
231348.9
225.67
a
45
980
vijin
usha

5)
using System;
using System.Collections.Generic;
using System.Text;
 
namespace ConsoleApp5
{
    class Employee
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public string Department { get; set; }
        public string Joining_Date { get; set; }
        public int Salary { get; set; }
 
    }
    public class Program
    {
        public static void Main()
        {
            List<Employee> listEmployees = new List<Employee>();
 
            while (true)
            {
                Console.WriteLine("1.Enter Employee Details");
 
                Console.WriteLine("2.Display");
 
                Console.WriteLine("3.Total Employee Count");
 
                Console.WriteLine("4.Search Employee by name");
 
 
                Console.WriteLine("Eneter your Choice :");
 
                int choice = int.Parse(Console.ReadLine());
                switch (choice)
                {
 
                    case 1:
                        {
 
                            Console.WriteLine("Enter The No. Employees details you want to enter:");
                            
                            for (int i = 0; i < 1; i++)
                            {
 
                                Console.WriteLine("$Enter Employee " + i + " Details:");
                                Console.WriteLine("Enter Emp ID:");
                                int id = Convert.ToInt32(Console.ReadLine());
                                Console.WriteLine("Enter Emp name:");
                                string name = Console.ReadLine();
                                Console.WriteLine("Enter Emp department:");
                                string department = Console.ReadLine();
                                Console.WriteLine("Enter Emp joining date:");
                                string jdate = Console.ReadLine();
                                Console.WriteLine("Enter Emp salary:");
                                int salary = Convert.ToInt32(Console.ReadLine());
 
                                Employee emp1 = new Employee() { ID = id, Name = name, Department = department, Joining_Date = jdate, Salary = salary };
                                listEmployees.Add(emp1);
                            }
                        }
                        break;
 

                    case 2:
                        {
                            Console.WriteLine("\n All Details of Employees:");
                            foreach (Employee employee in listEmployees)
                            {
                                Console.WriteLine("Employee Detail:");
 

                                Console.WriteLine($"\nID = {employee.ID}, \nName = {employee.Name}, " +
                                    $"\nDepartment = {employee.Department},\nJoining_Date={employee.Joining_Date}, " +
                                    $"\nSalary = {employee.Salary}");
                            }
                        }
                        break;
                    case 3:
                        {
 
                            Console.WriteLine($"\n\nTotal Employee Count : {listEmployees.Count}");
                        }
                        break;
                    case 4:
                        {
                            Console.WriteLine("\nEnter Employee Name:");
                            string nm = Console.ReadLine();
                            List<Employee> findEmp = listEmployees.FindAll(employee => employee.Name == nm);
                            foreach (Employee employee in findEmp)
                            {
                                Console.WriteLine($"\nID = {employee.ID}, \nName = {employee.Name}, " +
                                    $"\nDepartment = {employee.Department},\nJoining_Date={employee.Joining_Date}, " +
                                    $"\nSalary = {employee.Salary}");
                            }
                        }
                        break;
                    default:
                        {
                            Console.WriteLine("Wrong Choice");
                        }
                        break;
 
                }
            }
        }
 
 

    }
}
oputput
1.Enter Employee Details
2.Display
3.Total Employee Count
4.Search Employee by name
Eneter your Choice :
2
All Details of Employees:
1.Enter Employee Details
2.Display
3.Total Employee Count
4.Search Employee by nameEneter your Choice



6.
using System;
using System.Collections.Generic;
using System.Text;
 
namespace ConsoleApp5
{
    class Player
    {
   
        public int Runs{ get; set; }
        public string Name { get; set; }
    }
 
    class Team
    {
    
        static void Main(string[] args)
        {
 
            Player[] india = new Player[]
            {
                new Player{Name="usha",Runs=25000},
                new Player{Name="Avanthi",Runs=26700},
                new Player{Name="Alekhya",Runs=26000},
             };
 
            IEnumerable<Player> GetAllCustomer()
            {
                return india;
            }
            foreach (var item in GetAllCustomer())
            {
                Console.Write("\nName: " + item.Name + "\nRuns Scored :" + item.Runs);
            }
 
      }
}
}
output:
Name: usha
Runs Scored :25000Name: Avanthi
Runs Scored :26700
Name: Alekhya
Runs Scored :26000


					 *******************************************************************************
										ASSIGNMENT -6
1.
using System;
class Program 
{
    delegate void EmployeeDelegate(string name, int age, string department);
    static void Main(string[] args) 
    {
        EmployeeDelegate empDelegate = new EmployeeDelegate(PrintManagerDetails);  
        // Call the delegate to print details of a manager  
            empDelegate("Smith", 42, "Sales"); 
          
    } 
    static void PrintManagerDetails(string name, int age, string department)
    {
        Console.WriteLine("Manager name: " + name);
        Console.WriteLine("Age: " + age); 
        Console.WriteLine("Department: " + department);    
    }
}

OUTPUT:

Manager name: Smith
Age: 42
Department: Sales

2.
using System;


namespace Delegates
{//Multicaste Delegate//
    public delegate void EmployeeDelegate();

    public class MultiCastDelegate
    {
        static void Main(string[] args)
        {



            EmployeeDelegate obj = new EmployeeDelegate(KillometerTravel);
            obj+= (Tourallowance);
            obj+=(Telephoneallowance);
            obj+=(details);
           
            obj();

        }
        public static void KillometerTravel()
        {
            int kt = 2;
            Console.WriteLine("Kilometertravel: {0}", kt);
        }
        public static void Tourallowance()
        {
            int kt = 2;
            int ta = kt * 5;
            Console.WriteLine("Tour Allowance:{0}", ta);

        }
        public static void Telephoneallowance()
        {
            int tpa = 1000;
            Console.WriteLine("Telephone Allowance:{0}", tpa);
        }
        public static void details()
        {
            int ID = 1;
            string name = "rasna";
            int salary = 20000;
            Console.WriteLine("MarketingExecutive ID:{0}", ID);
            Console.WriteLine("MarketingExecutive Name:{0}", name);
            Console.WriteLine("MarketingExecutive salary:{0}", salary);
        }
}
}

OUTPUT:

Kilometertravel: 2
Tour Allowance:10
Telephone Allowance:1000
MarketingExecutive ID:1
MarketingExecutive Name:Rasna
MarketingExecutive salary:20000

3.
using System;
using System.Collections.Generic;
using System.Text;
 
namespace ConsoleApp5
{
    public delegate bool del(double amount);
    public delegate bool ZeroBalance();
    class Account
    {
       
            public event del MyEvent;
 
            public double acc_number;
            public string cust_number;
            public double acc_balance;
            public double amount;
 
            public Account(double no, string name, double bal)
            {
                acc_number = no;
                cust_number = name;
                acc_balance = bal;
 
                Display();
            }
 
            public void Deposit(double amount)
            {
                acc_balance = acc_balance + amount;
                Console.WriteLine("Deoposited amount: " + amount);
                Console.WriteLine("After Deposition, Balnce is: " + acc_balance);
            }
 
            public void Withdraw(double amount, del uBalance, ZeroBalance zBalance)
            {
                if (!zBalance())
                {
                    if (!uBalance(amount))
                    {
                        acc_balance = acc_balance - amount;
                        Console.WriteLine("Withdraw amount: " + amount);
                        Console.WriteLine("After Withdrawal, Balance is: " + acc_balance);
                    }
                }
 
            }
 
            public void Display()
            {
                Console.WriteLine(" Customer Name is: " + cust_number + "\n Account Number is:"
                    + acc_number + "\n Balance is: " + acc_balance);
                Console.WriteLine("----------------------------------------------------");
 
            }
        public bool ZeroBalance()
        {
            if (acc_balance <= 0)
            {
                Console.WriteLine("Transaction cannot be continued...Balance is 0");
                return true;
            }
            else
                return false;
        }
        public bool UnderBalance(double amount)
        {
            if (acc_balance <= 500)
            {
                Console.WriteLine("Transaction cannot be continued below specified limit of Rs.- 500");
                return true;
            }
            else
            {
                return false;
            }
        }
 
    }
}

class Program
        {
        static void Main(string[] args)
            {
 
            Account cust = new Account(9083456, "vijin", 500);
           
            cust.Deposit(4000);
            ZeroBalance z = new ZeroBalance(cust.ZeroBalance);
            del ub = new del(cust.UnderBalance);
 
            cust.Withdraw(400,ub,z);
             }
        }

OUTPUT:
 Customer Name is: vijin
 Account Number is:45687989
 Balance is: 500
----------------------------------------------------
Deoposited amount: 4000
After Deposition, Balnce is: 4500
Withdraw amount: 400
After Withdrawal, Balance is: 4100

4,5.
using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleApp5
{
    public delegate bool UnderBalance(double amount);
    public delegate bool ZeroBalance();
    class Account
    {

        //public event del MyEvent;

        public double acc_number;
        public string cust_number;
        public double acc_balance;
        public double amount;

        public Account(double no, string name, double bal)
        {
            acc_number = no;
            cust_number = name;
            acc_balance = bal;

            Display();
        }

        public void Deposit(double amount)
        {
            acc_balance = acc_balance + amount;
            Console.WriteLine("Deoposited amount: " + amount);
            Console.WriteLine("After Deposition, Balnce is: " + acc_balance);
        }

        public void Withdraw(double amount, UnderBalance uBalance, ZeroBalance zBalance)
        {
            if (!zBalance())
            {
                if (!uBalance(amount))
                {
                    acc_balance = acc_balance - amount;
                    Console.WriteLine("Withdraw amount: " + amount);
                    Console.WriteLine("After Withdrawal, Balance is: " + acc_balance);
                }
            }

        }

        public void Display()
        {
            Console.WriteLine(" Customer Name is: " + cust_number + "\n Account Number is:"
                + acc_number + "\n Balance is: " + acc_balance);
            Console.WriteLine("----------------------------------------------------");

        }


    }
    class HDFCBank : Account
    {
        public HDFCBank(double no, string name, double bal) : base(no, name, bal)
        {

        }
        public bool ZeroBalance()
        {
            if (acc_balance <= 0)
            {
                Console.WriteLine("Transaction cannot be continued...Balance is 0");
                return true;
            }
            else
                return false;
        }
        public bool UnderBalance(double amount)
        {
            if (acc_balance <= 1000)
            {
                Console.WriteLine("Transaction cannot be continued below specified limit of Rs.-1000");
                return true;
            }
            else
            {
                return false;
            }
        }
    }
        class ICICIBank : Account
        {
            public ICICIBank(double no, string name, double bal) : base(no, name, bal)
            {


            }
            public bool ZeroBalance()
            {
                if (acc_balance <= 0)
                {
                    Console.WriteLine("Transaction cannot be continued as balance is insufficient/zero in Account");
                    return true;
                }
                else
                    return false;
            }
            public bool UnderBalance(double amount)
            {
                if (acc_balance <= 1000)
                {
                    Console.WriteLine("Transaction cannot be continued as balance is insufficient/zero in Account");
                    return true;
                }
                else
                {
                    return false;
                }
            }
        }
    
    class Program
    {
        static void Main(string[] args)
        {

            HDFCBank hdfc_cust = new HDFCBank(78907, "vijin", 500);

            hdfc_cust.Deposit(4000);

            hdfc_cust.Withdraw(400, hdfc_cust.UnderBalance, hdfc_cust.ZeroBalance);

            Console.WriteLine("-------------------------------------------------------");

            ICICIBank icici_cust = new ICICIBank(236748, "vm", 500);

            icici_cust.Deposit(400);

            icici_cust.Withdraw(9000, icici_cust.UnderBalance, icici_cust.ZeroBalance);
        }
    }
}

OUTPUT:
 Customer Name is: vijin
 Account Number is:78907
 Balance is: 500
----------------------------------------------------
Deoposited amount: 4000
After Deposition, Balnce is: 4500
Withdraw amount: 400
After Withdrawal, Balance is: 4100
-------------------------------------------------------
 Customer Name is: vm
 Account Number is:236748
 Balance is: 500
----------------------------------------------------
Deoposited amount: 400
After Deposition, Balnce is: 900
Transaction cannot be continued as balance is insufficient/zero in Account
					
					*************************************************************************

									ASSIGNMENT-7


1.
using System;
using System.IO;
 
namespace ass
{
    class add
    {
        static void Main(string[] args)
        {
 
            string file = @"C:\\Users\\PATHPRAT\\source\\repos\\ass\\bin\\Debug\\netcoreapp3.1\\assaignment.txt";
            Console.WriteLine("Enter Customer Details....");
            Console.WriteLine("Enter Account Number:");
            int Acc_Number = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter Customer Name:");
            string Customer_Name = Console.ReadLine();
            Console.WriteLine("Enter Balance:");
            int Balance = Convert.ToInt32(Console.ReadLine());
 

            using (StreamWriter writer = new StreamWriter(file))
            {
                writer.Write("Customer Name:" + Customer_Name + "\nAccount Number:" + Acc_Number + "\nBalance:" + Balance);
            }
            Console.WriteLine("Saved");
 
            Console.WriteLine("\n\nReading Text File:::");
 
            using (StreamReader reader = new StreamReader(file))
            {
                Console.WriteLine(reader.ReadToEnd());
            }
 
            Console.ReadKey();
        }
    }
}
 

OUTPUT:

Enter Customer Details....
Enter Account Number:
123
Enter Customer Name:
usha
Enter Balance:
20000
Saved
 

Reading Text File:::
Customer Name:vijin
Account Number:123
Balance:20000


2.
using System;
using System.IO;
 
namespace ass
{
    class add
    {
        static void Main(string[] args)
        {
                string path = @"C:\\Users\\PATHPRAT\\source\\repos\\ass\\bin\\Debug\\netcoreapp3.1\\assainment";
 
 
                DirectoryInfo fl = new DirectoryInfo(path);
                fl.Create();
                {
                    Console.WriteLine("Directory has been created");
                }
                Console.WriteLine("Directory Path =" + fl.FullName);
 
                // Get the directory name
                Console.WriteLine("Directory Name=" + fl.Name);
 
                // Get the parent directory
                Console.WriteLine("Parent Directory=" + fl.Parent);
 

                string[] directory = Directory.GetDirectories(path, "*", SearchOption.AllDirectories);
                //return name of sub directory
 
 
                string[] file = Directory.GetFiles(path, "*", SearchOption.AllDirectories);
                //return name of sub file
                Console.WriteLine("Directory Details (sub-directories)----");
                foreach (string diNext in directory)
                {
                    var dirInfo = new DirectoryInfo(diNext);
                    Console.WriteLine(dirInfo.FullName);
                }
                Console.WriteLine("File Details----");
                foreach (string fiNext in file)
                {
                    var fileInfo = new FileInfo(fiNext);
                    Console.WriteLine(fileInfo.FullName);
 
                }
            }
        }
    }
    
 
OUTPUT:

Directory has been created
Directory Path =C:\Users\PATHPRAT\source\repos\ass\bin\Debug\netcoreapp3.1\assainment
Directory Name=assainment
Parent Directory=C:\Users\PATHPRAT\source\repos\ass\bin\Debug\netcoreapp3.1
Directory Details (sub-directories)----
File Details----

3.
using System;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
 

namespace ass
{
    [Serializable]
    internal class Employee
    {
 
        public int ID { get; set; }
        public string Name { get; set; }
        public string Department { get; set; }
        //emp has to define date of joining using Date
        public string Joining_Dt { get; set; }
        public double Salary { get; set; }
        public static int EmployeeCount = 0;//static member variable
 
        //emp has to define date of joining
 
        //default constructor
        public Employee()
        {
            ID = 0;
            Name = "";
            Department = "HR";
            Joining_Dt = "10, 10, 2021";
            Salary = 0.0;
            EmployeeCount += 1;
        }
        //Parameterized constructor
        public Employee(int id, string name, double salary, string JoiningDt, string department)
        {
            this.ID = id;
            this.Name = name;
            this.Department = department;
            this.Joining_Dt = JoiningDt;
            this.Salary = salary;
            EmployeeCount += 1;
        }
        public override string ToString()
        {
            return "\nEmployee Id = " + ID + "\nEmployee Name = " + Name + "\nDate of Joining = " + Joining_Dt + "\nDepartment = " + Department + "\nBasic Salary = " + Salary;
        }
 
        //Salary calculation 
        public virtual double CalculateSalary()
        {
            return Salary;
        }
    }
    [Serializable]
    internal class Manager : Employee
    {
 
        public double FoodAllowance { get; set; }
        public double OtherAllowance { get; set; }
        public double TotalSalary { get; set; } = 0.0;
 
        //Calling base class No parameter Constructor 
        public Manager() : base()
        {
 
            FoodAllowance = 0.0;
            OtherAllowance = 0.0;
        }
        //Calling base class's parameterized Constructor 
        //and passing parameters of base class(Employee)
        //Using Base class Constructor
        public Manager(int id, String name, string JoiningDt, string department, double salary, double FoodAllowance, double OtherAllowance)
: base(id, name, salary, JoiningDt, department)
        {
 
            this.FoodAllowance = FoodAllowance;
            this.OtherAllowance = OtherAllowance;
        }
 
        //Ovrriding CalculateSalary() method of base class(Enployee)
 
        public override double CalculateSalary()
        {
            TotalSalary = base.Salary + FoodAllowance + OtherAllowance;
            return TotalSalary;
        }
 
        //Overriding ToString Method for string representation of an object
        public override string ToString()
        {
            return base.ToString() + "\nFood Allowance = " + FoodAllowance + "\nOther Allowance = " + OtherAllowance + "\nTotal Salary = " + CalculateSalary();
        }
    }
    [Serializable]
    class MarketingExecutive : Employee
    {
 
        public double commission { get; set; }
        public double PetrolAllowance { get; set; }
        public double TotalSalary { get; set; }
 
        //Calling base class No parameter Constructor 
        public MarketingExecutive() : base()
        {
            commission = 0.0;
            PetrolAllowance = 0.0;
        }
        //Calling base class's parameterized Constructor 
        //and passing parameters of base class(Employee)
        //Using Base class Constructor
        public MarketingExecutive(int id, String name, string JoiningDt, string department, double salary, double FoodAllowance, double OtherAllowance)
           : base(id, name, salary, JoiningDt, department)
        {
 
            this.commission = commission;
            this.PetrolAllowance = PetrolAllowance;
        }
 
        //Ovrriding CalculateSalary() method of base class(Enployee)
 
        public override double CalculateSalary()
        {
            TotalSalary = base.Salary + PetrolAllowance + commission;
            return TotalSalary;
        }
 
        //Overriding ToString Method for string representation of an object
        public override string ToString()
        {
            return base.ToString() + "\ncommission = " + commission + "\nPetrolAllowance = " + PetrolAllowance + "\nTotal Salary = " + CalculateSalary();
        }
    }
    class add
    {
        static void Main(string[] args)
        {
            Employee emp = new Employee(102, "Ram", 42344, "04, 10, 2022", "ACCOUNTS");
            Console.WriteLine(emp);
            Console.ReadKey();
 
            IFormatter formatter = new BinaryFormatter();
            Stream stream = new FileStream(@"C:\Users\PATHPRAT\source\repos\ass\bin\Debug\netcoreapp3.1\textdoc1.txt", FileMode.Create, FileAccess.Write);
 
            formatter.Serialize(stream, emp);
            stream.Close();
 

            //manager object
 
            Manager manager = new Manager(100, "Shruti", "04, 10, 2022", "ACCOUNTS", 20000, 5000, 2500);
            Console.WriteLine(manager);
            Console.ReadKey();
            IFormatter formatter1 = new BinaryFormatter();
            Stream stream1 = new FileStream(@"C:\Users\PATHPRAT\source\repos\ass\bin\Debug\netcoreapp3.1\textdoc2.txt", FileMode.Create, FileAccess.Write);
 
            formatter1.Serialize(stream1, manager);
            stream1.Close();
 
            //Marketing Executive object
 

            MarketingExecutive mr = new MarketingExecutive(101, "Priya", "04, 10, 2022", "Sales", 25000, 5800, 2000);
            Console.WriteLine(mr);
            Console.ReadKey();
 
            IFormatter formatter2 = new BinaryFormatter();
            Stream stream2 = new FileStream(@"C:\Users\PATHPRAT\source\repos\ass\bin\Debug\netcoreapp3.1\textdoc3.txt", FileMode.Create, FileAccess.Write);
 
            formatter2.Serialize(stream2, mr);
            stream2.Close();
	   }
    }
}

OUTPUT:

Employee Id = 102
Employee Name = usha
Date of Joining = 04, 10, 2022
Department = ACCOUNTS
Basic Salary = 42344
 
Employee Id = 100
Employee Name = avanthi
Date of Joining = 04, 10, 2022
Department = ACCOUNTS
Basic Salary = 20000
Food Allowance = 5000
Other Allowance = 2500
Total Salary = 27500
 
Employee Id = 101
Employee Name = 
Date of Joining = 04, 10, 2022
Department = Sales
Basic Salary = 25000
commission = 0
PetrolAllowance = 0
Total Salary = 25000

4.
using System;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
 

namespace ass
{
    [Serializable]
    class add
    {
        public int ID;
        public string Name;
        public double Salary;
        static void Main(string[] args)
        {
            add obj = new add();
 
            Console.WriteLine("Enter the number of Employees you want to Store:");
            int num = Convert.ToInt32(Console.ReadLine());
 
            for (int i = 0; i < num; i++)
            {
                Console.WriteLine("Enter Manager ID:");
                int id = Convert.ToInt32(Console.ReadLine());
                obj.ID = id;
                Console.WriteLine("Enter Manager Name:");
                string nm = Console.ReadLine();
                obj.Name = nm;
                Console.WriteLine("Enter Manager Salary:");
                double sal = Convert.ToDouble(Console.ReadLine());
                obj.Salary = sal;
 
            }
 
            IFormatter formatter = new BinaryFormatter();
            Stream stream = new FileStream(@"C:\Users\PATHPRAT\source\repos\ass\bin\Debug\netcoreapp3.1\textdoc4.txt", FileMode.Create, FileAccess.Write);
 
            formatter.Serialize(stream, obj);
            stream.Close();
 
            stream = new FileStream(@"C:\Users\PATHPRAT\source\repos\ass\bin\Debug\netcoreapp3.1\textdoc4.txt", FileMode.Open, FileAccess.Read);
            add objnew = (add)formatter.Deserialize(stream);
 
            Console.WriteLine(objnew.ID);
            Console.WriteLine(objnew.Name);
            Console.WriteLine(objnew.Salary);
 
            Console.ReadKey();
        }
 
    }
}

OUTPUT:

Enter the number of Employees you want to Store:
2
Enter Manager ID:
123
Enter Manager Name:
vijin
Enter Manager Salary:
2000
Enter Manager ID:
22
Enter Manager Name:
vm
Enter Manager Salary:
3000
22
rahul
3000















